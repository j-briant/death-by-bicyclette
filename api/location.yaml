openapi: 3.0.3
info:
  title: death-by-bicyclette - OpenAPI 3.0
  description: |-
    API definition of the death-by-bicyclette app.
  contact:
    email: temporary@mail.ch
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://future-serve.ch/api
tags:
  - name: location
    description: Deadly locations
  - name: user
    description: Operations about user
paths:
  /location:
    put:
      tags:
        - location
      summary: Update an existing location
      description: Update an existing location by Id
      operationId: updateLocation
      requestBody:
        description: Update an existent location
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
          application/xml:
            schema:
              $ref: '#/components/schemas/Location'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Location'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Location'
        '400':
          description: Invalid ID supplied
        '404':
          description: Location not found
        '405':
          description: Validation exception
      security:
        - location_auth:
            - write:locations
            - read:locations
    post:
      tags:
        - location
      summary: Add a new location
      description: Add a new location
      operationId: addLocation
      requestBody:
        description: Create a new location
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
          application/xml:
            schema:
              $ref: '#/components/schemas/Location'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Location'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Location'
        '405':
          description: Invalid input
      security:
        - location_auth:
            - write:locations
            - read:locations
  
  /location/{locationId}:
    get:
      tags:
        - location
      summary: Find location by ID
      description: Returns a single location
      operationId: getLocationById
      parameters:
        - name: locationId
          in: path
          description: ID of location to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Location'
        '400':
          description: Invalid ID supplied
        '404':
          description: Location not found
      security:
        - api_key: []
        - location_auth:
            - write:locations
            - read:locations
    post:
      tags:
        - location
      summary: Update a location with form data
      description: ''
      operationId: updateLocationWithForm
      parameters:
        - name: locationId
          in: path
          description: ID of location that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      security:
        - location_auth:
            - write:locations
            - read:locations
    delete:
      tags:
        - location
      summary: Deletes a location
      description: delete a location
      operationId: deleteLocation
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: locationId
          in: path
          description: Location id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid location value
      security:
        - location_auth:
            - write:locations
            - read:locations

  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    User:
      type: object
      properties:
        uid:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Location:
      required:
        - uid 
        - geom
      type: object
      properties:
        uid:
          type: integer
          format: int64
          example: 10
        geom:
          type: string
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: geom
      xml:
        name: location
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Location object that needs to be added
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Location'
        application/xml:
          schema:
            $ref: '#/components/schemas/Location'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    location_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://future-serve.ch/oauth/authorize
          scopes:
            write:locations: modify locations in your account
            read:locations: read your locations
    api_key:
      type: apiKey
      name: api_key
      in: header